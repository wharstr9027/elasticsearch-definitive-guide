[[data-in-data-out]]
== 数据输入, 数据输出

无论我们写什么样的程序，目的都是一样的：以某种方式组织数据服务我们的目的。但是数据不仅仅由随机位和字节组成。我们建立数据元素之间的关系以便于表示实体，或者现实世界中存在的事物。如果我们知道一个名字和电子邮件地址属于同一个人，那么它将会更有意义。

尽管在现实世界中，不是所有的类型相同的实体看起来都是一样的。一个人可能有一个家庭电话号码，而另一个人只有一个手机号码，而另外一个人可能两者兼有。一个人可能有三个电子邮件地址，而另一个人却一个都没有。一位西班牙人可能有两个姓，而讲英语的人可能只有一个姓。

面向对象编程语言如此流行的原因之一是对象帮我们表示和处理现实世界具有潜在的复杂的数据结构的实体，到目前为止，一切都很完美！

但是当我们需要存储这些实体时问题来了，传统上，我们以行和列的形式存储数据到关系型数据库中，相当于使用电子表格。正因为我们使用了这种不灵活的存储介质导致所有我们使用对象的灵活性都丢失了。

但是我们是否可以将对象存储为对象((("objects", "storing as objects")))，而不是模型化我们的应用在有限制性的电子表格中呢？这样我们就能更加专注于使用数据，而且对象的灵活性也不受存储的影响同样可以返回给我们呢？

一个对象是基于特定语言的内存的数据结构。((("objects", "defined")))为了通过网络发送或者存储它，我们需要将它表示成某种标准的格式。http://en.wikipedia.org/wiki/Json[JSON] 是一种以人可读的文本表示对象的方法。((("objects", "represented by JSON")))((("JSON", "representing objects in human-readable text")))((("JavaScript Object Notation", see="JSON")))它已经变成 NoSQL 世界交换数据的事实标准。当一个对象被序列化成为 JSON，它被称为一个 JSON 文档((("JSON documents")))。

Elastcisearch 是分布式的文档存储。((("document store, Elasticsearch as")))它能存储和检索复杂的数据结构--序列化成为JSON文档--以实时的方式。换句话说，一旦一个文档被存储在 Elasticsearch 中，它就是可以被集群中的任意节点检索到。

当然，我们不仅要存储数据，我们一定还需要查询它，成批且快速的查询它们。尽管现存的 NoSQL 解决方案允许我们以文档的形式存储对象，但是他们仍旧需要我们思考如何查询的数据，以及为了使得数据检索最快确定哪些字段需要被索引。

在 Elasticsearch 中, 每个字段的所有数据都是默认被索引的。((("indexing", "in Elasticsearch")))，即,每个字段都有为了快速检索设置的专用的倒排索引。而且，不像其他多数的数据库，它能在相同的查询中使用这些倒排索引，并以惊人的速度返回结果。

在本章中，我们展示了用来创建，检索，更新和删除文档的 API。就目前而言，我们不关心文档中的数据或者怎样查询它们。所有我们关心的就是在 Elasticsearch 中怎样安全的存储文档，以及如何将文档再次返回。

[[document]]
=== 什么是文档?

在大多数应用中的大多数实体或对象可以被序列化为 JSON 对象，这个 JSON 对象具有键和值。((("objects")))((("JSON", "objects")))((("keys and values")))

一个键是一个字段或字段的名称，一个值((("values")))是一个字符串，一个数字，一个布尔值，另一个对象，一些数组值，或一些其它特殊类型诸如表示日期的字符串，或代表一个地理位置的对象：

[source,js]
--------------------------------------------------
{
    "name":         "John Smith",
    "age":          42,
    "confirmed":    true,
    "join_date":    "2014-06-01",
    "home": {
        "lat":      51.5,
        "lon":      0.1
    },
    "accounts": [
        {
            "type": "facebook",
            "id":   "johnsmith"
        },
        {
            "type": "twitter",
            "id":   "johnsmith"
        }
    ]
}
--------------------------------------------------

通常情况下，我们使用的术语对象和文档是可互相替换的，然而，有一个区别：((("objects", "documents versus")))((("documents", "objects versus")))
一个对象仅仅是一个 JSON 对象--类似于什么是 hash，hashmap，字典或者联合数组。
对象可能包含了另外一些对象。在 Elasticsearch 中，术语文档有着特定的含义。它是指最顶层或者根对象((("root object"))),
这个根对象被序列化成 JSON 并存储到 Elasticsearch 的一个唯一的 ID 中。 

警告: 字段的名字可以是任何有效的字符串，但是不能包含时间。

=== 文档元数据

一个文档不仅仅包含它的数据((("documents", "metadata"))) ，也包含元数据和一些文档的信息。
((("metadata, document"))) 所需的三种元数据元素如下：

 `_index`::
   文档在哪存放

 `_type`::
   文档表示的对象类别

 `_id`::
   文档唯一标识

==== _index

一个索引是应该是一些文档的集合，这些文档有着共同的特性被分组到一起，例如，你可能存储所有的产品在索引 `products` 中，而存储所有销售的交易到索引 `sales` 中。虽然也可能存储不相关的数据到一个索引中，但是这个通常看作是反模型的做法。

[提示]
====
实际上，在 Elasticsearch 中，我们的数据是被存储在分片中，而一个索引仅仅是逻辑上的命名空间，这个命名空间由一个或者多个分片组合在一起。((("shards", "grouped in indices")))然而，这是一个内部细节，我们的应用程序根本不应该关心分片，对于应用程序而言，只需知道文档位于一个索引内。Elasticsearch 会处理所有的细节。
 
====

我们将介绍如何创建和管理索引<<index-management>>，但是现在我们将让 Elasticsearch 帮我们创建索引。所有需要我们做的就是选择一个索引名，这个名字必须小写，不能以下划线开头，不能包含逗号。我们用 `website` 作为索引名举例。

==== _type

数据可能在索引中只是松散的组合在一起，但是通常明确定义一些数据中的子分区是很有用的。例如，所有的产品都放在一个索引中，但是你有许多不同的产品类别，比如 "electronics", "kitchen" and "lawn-care"。

这些文档共享一种相同的（或非常相似）的模式：他们有一个标题、描述、产品代码和价格。他们只是碰巧属于“产品”下的一些子类。

Elasticsearch 暴露了一个名为 _types_ 功能，它允许您在索引中逻辑分区数据。不同类型的文档可能有不同的字段，但是如果它们高度相似就是最好的。我们将要在 <<mapping>>中更多的讨论关于应用的type和一些限制。

一个  `_type` 命名可以是大写或者小写，但是不能以下划线或者句号开头，不应该包含逗号。((("types", "names of")))并且长度限制为256个字符. 我们使用 `blog` 作为类型名举例。

==== _id

该 _ID_ 是一个字符串，((("id", "&#x5f;id, in document metadata"))) 它和 `_index` 以及 `_type` 一起唯一确定 Elasticsearch 中的一个文档。当你创建一个新的文档，要么提供自己的 `_id` ，要么让 Elasticsearch 帮你生成。

==== 其他的元数据

还有一些其他的元数据元素，他们将在<<mapping>>中说明。通过前面已经列出的元数据元素，我们已经能存储文档到 Elasticsearch 中并且通过 ID 检索它。换句话说，使用 Elasticsearch 作为文档的存储介质。

[[update-doc]]
=== 更新整个文档

在 Elasticsearch 中文档是不可改变的，我们不能使用((("documents", "updating whole document")))((("updating documents", "whole document")))的办法改变他们。相反，如果我们需要更新现有的文档，我们要重建索引或者进行替换。((("reindexing")))((("indexing", seealso="reindexing")))在这里我们使用的 `index` API 和我们已经讨论的<<index-doc>>中的相同.

[source,js]
--------------------------------------------------
PUT /website/blog/123
{
  "title": "My first blog entry",
  "text":  "I am starting to get the hang of this...",
  "date":  "2014/01/02"
}
--------------------------------------------------
// SENSE: 030_Data/25_Reindex_doc.json

在响应体中，我们能看到 Elasticsearch 已经增加了 `_version` 字段值：

[source,js]
--------------------------------------------------
{
  "_index" :   "website",
  "_type" :    "blog",
  "_id" :      "123",
  "_version" : 2,
  "created":   false <1>
}
--------------------------------------------------
<1> 该 `created` 标志设置成 `false` ，是因为相同的索引、类型、和 ID 的文档已经存在。

在内部，Elasticsearch 标志旧文档为已删除，并增加一个全新的文档。((("deleted documents")))尽管你不能再对旧版本的文档进行访问，但是旧版本的文档并不会立即消失，Elasticsearch 会在你继续索引更多的数据时在后台清除标记为删除的文档，以便于为新的索引数据预留更多的资源。

在本章的后面部分，我们会介绍 `update` API, 这个 API 可以被用来做 <<partial-updates,partial updates to a document>>。虽然它是以改变文档的方式展现的，实际上 Elasticsearch 仍然像以前一样，使用相同的几个步骤实现，如下所示：

1. 从旧文档中检索出特定的 JSON
2. 更改该 JSON
3. 删除旧文档
4. 索引一个新文档

唯一的区别在于,  `update` API 仅仅通过一个客户端请求来实现这些步骤，而不是单独请求多次 `get` 和 `index` 请求。
 

